Problem Statement :

Given a list like List("stock1",75.6,"stock2",100.26,"stock1",108.34,"stock3",175.8,"stock2",100.26,"stock2",100.26,"stock1",75.6)
 a) write a function to convert the list as List(("stock1",75.6),("stock2",100.26),("stock1",108.34),("stock3",175.8),...).
 b) take output of above result as input and find out stocks which are up with same price more than once.
 c) find out stock which are up with same price maximum number of times.
 d) In case if stock is up with different prices than calculate the average price of that stock


Solutions :

a) def pairedList(list : List[Any])= list.grouped(2).toList

b) val stockWithSamePrices=pairedList(list).groupBy(l=>l).mapValues(_.length).filter((t)=>t._2 > 1)

c) val maxTimeStockWithSamePrices=pairedList(list).groupBy(l=>l).mapValues(_.length).maxBy(_._2)._1


Problem Statement :
Write a function to convert a given string "String" into format like "83:116:114:105:110:103", where 'S'.toInt 
will return 83.

Solution:

def toNumString(str : String):String=str.toArray.map(x => x.toInt).mkString(":")


Problem Statement :
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

Solution:
val sum=List.range(1, 1000).filter(x=> x%3 ==0 || x%5 ==0).foldLeft(0)(_+_)


Problem Statement :
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Solution:
lazy val fibs: Stream[BigInt] = BigInt(0) #:: BigInt(1) #:: fibs.zip(fibs.tail).map { n => n._1 + n._2 }
val l=  fibs take 1000 filter(x => x < 4000000) filter(_%2 == 0) 
val sum=l.foldLeft(BigInt(0))(_+_)
